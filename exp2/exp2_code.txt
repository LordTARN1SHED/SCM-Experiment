;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   周三 九月 13 2023
; Processor: AT89C51
; Compiler:  ASEM-51 (Proteus)
;====================================================================

$NOMOD51
$INCLUDE (8051.MCU)

;====================================================================
; DEFINITIONS
;====================================================================

;====================================================================
; VARIABLES
;====================================================================

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
      org   0000h
      jmp   Start
      org 000Bh
      JMP LABEL1

;====================================================================
; CODE SEGMENT
;====================================================================

      org   0100h
Start:	
      ; Write your code here
      
      ;设置中断允许寄存器IE
      
      ;MOV DPTR, #08AH
      ;MOV A, #82H
      ;MOVX @DPTR, A
      SETB EA
      ;MOV ES, #0H
      ;MOV ET1, #0H
      ;MOV EX1 ,#0H
      SETB ET0 
      ;MOV EX0, #0H
      
      ;设置TMOD TCON
      MOV TMOD, #02H
      ;MOV TCON, #10H
      
      ;设置T0计数器初值
      MOV TH0, #00H
      
      ;开始计数
      SETB TR0
      
      MOV DPTR,#TABLE
      MOV R1,#0H
      MOV R2,#0H
      MOV R3,#0H
      MOV R4,#0H
      MOV R5,#0H
      MOV A,#0H
LOOP:	
    MOV P0, #11111110B
    MOV A, P0
    CPL A
    ANL A, #11111110B
    MOV R0,#0H
    JNZ XPOS;无按键继续查
    
    MOV P0, #11111101B
    MOV A, P0
    CPL A
    ANL A, #11111101B
    MOV R0,#4H
    JNZ XPOS;无按键继续查
    
    MOV P0, #11111011B
    MOV A, P0
    CPL A
    ANL A, #11111011B
    MOV R0,#8H
    JNZ XPOS;无按键继续查
    
    MOV P0, #11110111B
    MOV A, P0
    CPL A
    ANL A, #11110111B
    MOV R0,#0CH
    JZ LOOP;无按键，继续查
    
XPOS:
    CALL DELAY
    CALL DELAY
    CJNE A,#00010000B,BUT2
    JMP ADDCONTENT
BUT2:
    CJNE A,#00100000B,BUT3
    INC R0
    JMP ADDCONTENT
BUT3:
    CJNE A,#01000000B,BUT4
    INC R0
    INC R0
    JMP ADDCONTENT
BUT4:
    CJNE A,#10000000B,LOOP
    INC R0
    INC R0
    INC R0
    JMP ADDCONTENT
    
ADDCONTENT:
    CALL KEYUP
    MOV A,R0
CLEARCHECK:
    CJNE A,#0CH,PLUSCHECK
    MOV R1,#0H
    MOV R2,#0H
    MOV R3,#0H
    MOV R4,#0H
    JMP RESGOT
PLUSCHECK:
    CJNE A,#00H,LOAD
    MOV B,R1
    MOV R0,B
    CALL VALUEUP
    MOV B,R0
    MOV R1,B
    MOV B,R2
    MOV R0,B
    CALL VALUEUP
    MOV B,R0
    MOV R2,B
    MOV B,R3
    MOV R0,B
    CALL VALUEUP
    MOV B,R0
    MOV R3,B
    MOV B,R4
    MOV R0,B
    CALL VALUEUP
    MOV B,R0
    MOV R4,B
    JMP RESGOT
LOAD:
    MOVC A,@A+DPTR
    MOV B,A
    MOV A,R3
    MOV R4,A
    MOV A,R2
    MOV R3,A
    MOV A,R1
    MOV R2,A
    MOV R1,B
RESGOT:
;    CALL SHOW
    JMP LOOP
    
KEYUP:
    MOV A, P0
    CPL A
    ANL A,#0F0H
    JNZ KEYUP;不为零则未松，回去
    RET
    
SHOW:
    MOV P1,#11111110B
    MOV P2,R4
    CALL DELAY
    MOV P1,#11111101B
    MOV P2,R3
    CALL DELAY
    MOV P1,#11111011B
    MOV P2,R2
    CALL DELAY
    MOV P1,#11110111B
    MOV P2,R1
    CALL DELAY
    RET
    
    

DELAY:
   MOV R6, #0FFH
DELAY_1:
   MOV R7, #0FFH
   DJNZ R7, $
   DJNZ R6, DELAY_1
   RET

VALUEUP:;将R0中建码加一
CHANGENULL:
   CJNE R0,#00H,CHANGEMIN
   JMP VALUEUP_OUT
CHANGEMIN:
   CJNE R0,#40H,CHANGE0
   JMP VALUEUP_OUT
CHANGE0:
   CJNE R0,#3FH,CHANGE1
   MOV R0,#06H
   JMP VALUEUP_OUT
CHANGE1:
   CJNE R0,#06H,CHANGE2
   MOV R0,#5BH
   JMP VALUEUP_OUT
CHANGE2:
   CJNE R0,#5BH,CHANGE3
   MOV R0,#4FH
   JMP VALUEUP_OUT
CHANGE3:
   CJNE R0,#4FH,CHANGE4
   MOV R0,#66H
   JMP VALUEUP_OUT
CHANGE4:
   CJNE R0,#66H,CHANGE5
   MOV R0,#6DH
   JMP VALUEUP_OUT
CHANGE5:
   CJNE R0,#6DH,CHANGE6
   MOV R0,#7DH
   JMP VALUEUP_OUT
CHANGE6:
   CJNE R0,#7DH,CHANGE7
   MOV R0,#07H
   JMP VALUEUP_OUT
CHANGE7:
   CJNE R0,#07H,CHANGE8
   MOV R0,#7FH
   JMP VALUEUP_OUT
CHANGE8:
   CJNE R0,#7FH,CHANGE9
   MOV R0,#6FH
   JMP VALUEUP_OUT
CHANGE9:
   CJNE R0,#6FH,CHANGEA
   MOV R0,#77H
   JMP VALUEUP_OUT
CHANGEA:
   CJNE R0,#77H,CHANGEB
   MOV R0,#7CH
   JMP VALUEUP_OUT
CHANGEB:
   CJNE R0,#7CH,CHANGEC
   MOV R0,#39H
   JMP VALUEUP_OUT
CHANGEC:
   CJNE R0,#39H,CHANGED
   MOV R0,#5EH
   JMP VALUEUP_OUT
CHANGED:
   CJNE R0,#5EH,CHANGEE
   MOV R0,#79H
   JMP VALUEUP_OUT
CHANGEE:
   CJNE R0,#79H,CHANGEF
   MOV R0,#71H
   JMP VALUEUP_OUT
CHANGEF:
   CJNE R0,#71H,VALUEUP_OUT
   MOV R0,#3FH
   JMP VALUEUP_OUT
   
VALUEUP_OUT:
   RET
   
LABEL1:
      PUSH ACC
      MOV A, R5
      CLR C
      SUBB A, #1H
      JC DISPLAY0
      MOV A, R5
      CLR C
      SUBB A, #2H
      JC DISPLAY1
      MOV A, R5
      CLR C
      SUBB A, #3H
      JC DISPLAY2
      JMP DISPLAY3   
DISPLAY0:
      MOV P1,#11110111B
      MOV P2,R1
      INC R5
      JMP NEXT
DISPLAY1:
      MOV P1,#11111011B
      MOV P2,R2
      INC R5
      JMP NEXT
DISPLAY2:
      MOV P1,#11111101B
      MOV P2,R3
      INC R5
      JMP NEXT
DISPLAY3:
      MOV P1,#11111110B
      MOV P2,R4
      MOV R5,#0H
NEXT:
      POP ACC
      RETI
   
TABLE:
   ;  +    -    *    /    =    3    6    9    0    2    5    8    C    1    4    7
   DB 79H, 40H, 79H, 79H, 79H, 4FH, 7DH, 6FH, 3FH, 5BH, 6DH, 7FH, 00H, 06H, 66H, 07H 
;====================================================================
      END
