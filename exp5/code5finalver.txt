#include  <reg51.h>
#include "delay.h"
#include "main.h"
#include"reg51.h"
#include"stdio.h"

sbit LOAD=P1^0;
sbit DIN=P1^1;
sbit DCLK=P1^2;
sbit DOUT=P3^2;
int timecount=0;
int T0count=0;
int keyPressed=0;
int mode=0;//load num,counting,paused
int keyoff=1;

char span[8]={0x06,0x07,0x03,0x0b,0x09,0x0d,0x0c,0x0e};
char numcode[18]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x40,0x00};//0-f - null
int pos[8]={0x0800,0x0900,0x0a00,0x0b00,0x0c00,0x0d00,0x0e00,0x0f00};//
char keyCode[16]={0x40,0x41,0x42,0x43,0x48,0x49,0x4a,0x4b,0x50,0x51,0x52,0x53,0x58,0x59,0x5a,0x5b};//4*4button
//key1-key10:0-9; key13:start; key14:pause and restart; key15:reset

//  定义位变量DQ，作为与18B20通信的单总线
//  目前使用P0.0，可以根据需要自行修改
sbit 		DQ = P0 ^ 0;
#define 	DQ_H	DQ = 1;
#define 	DQ_L	DQ = 0;

//函数原型声明，可以提出为单个头文件
void reset_ds18b20(void);
void write_byte(unsigned char dat);
unsigned char read_byte(void);

/*
执行时间：约等于10*n微秒，当主频为12MHz的时候，增加一个nop
如果考虑到其他语句的执行，可以再减掉一个nop
*/
void delay_10us(unsigned char n) {
	unsigned char i;
	for (i = n; i > 0; --i) {
		i = i;
		//_nop_(); //主频为12MHz
	}
}


/**********************************************************************************************************
函数名称：DS18B20初始化子程序
输入参数：无
输出参数：无
函数返回：无
**********************************************************************************************************/

void reset_ds18b20(void) {
	DQ_H;          		//  DQ先置高
	delay_10us(10);     //  延时
	DQ_L;             	//  发送复位脉冲
	delay_10us(60);     //  延时（480us - 960us)
	DQ_H;          		//  拉高数据线
	delay_10us(24);     //  DS18B20会产生应答脉冲，持续60-240us
}


/**********************************************************************************************************
函数名称：写一字节数据到DS18B20
输入参数：数据
输出参数：无
函数返回：无
**********************************************************************************************************/
void write_byte(unsigned char dat) {
	unsigned char i = 0;
	for (i = 8; i > 0; i--) {
		//为避免判断的时间加入到时序中，将判断放到外面
		if (dat & 0x01)
		{
			DQ_L;
			i++; i--; //延时 2us
			DQ_H;   //释放总线
			delay_10us(6);
		}
		else
		{
			DQ_L;
			delay_10us(6);
			DQ_H;
			i++; i--; //延时 2us
		}
		dat >>= 1;
	}
	delay_10us(3);
}
/**********************************************************************************************************
函数名称：从ds18b20读一字节数据函数
输入参数：无
输出参数：无
函数返回：读出的字节
**********************************************************************************************************/

unsigned char read_byte(void)
{
	unsigned char i = 0;
	unsigned char dat = 0;
	bit b;
	//先读低位再读高位
	for (i = 8; i > 0; i--)
	{
		DQ_L;
		i++; i--; //延时 2us
		DQ_H;  //释放总线
		dat >>= 1;  //必须在15us内读数据, 用这个表达式的时间占位
		b = DQ;

		if (DQ) {
			dat |= 0x80;
		}

		delay_10us(6);
	}
	return(dat);
}


unsigned int temper_change(int t)
{
	unsigned int temper;
	float tp;
	temper = t;
	if (temper < 0)    //考虑负温度的情况
	{
		temper = temper - 1;
		temper = ~temper;
		tp = temper * 0.0625;  //16位温度转换成10进制的温度
		temper = tp * 100 + 0.5;   //留两个小数点，并四舍五入
	}
	else
	{
		tp = temper * 0.0625;  //16位温度转换成10进制的温度
		temper = tp * 100 + 0.5;  //留两个小数点，并四舍五入
	}
	return temper;
}


int readtemper(void) {
	unsigned char x1 = 0;
	unsigned char x2 = 0;
	int x = 0;
	unsigned int t = 0;

	reset_ds18b20();
	write_byte(0xCC);
	write_byte(0x44);
	DQ_H;          		//  DQ先置高
	delay_10us(60000);     //  延时
	reset_ds18b20();
	write_byte(0xCC);
	write_byte(0xBE);
	x1 = read_byte();
	x2 = read_byte();
	t = x2;
	t <<= 8;
	t = t | x1;
	x = temper_change(t);

	return x;
}

void CH451do(int command){
	int j=0;
	LOAD=0;
	for(j=0;j<12;j++){
		if(command&0x0001) DIN=1;
		else DIN=0;
		DCLK=0;
		command>>=1;
		DCLK=1;
	}
	LOAD=1;
}

void CH451show(char position,char num,int dot){
	if(dot) CH451do(pos[position]|numcode[num]|0x80);
	else CH451do(pos[position]|numcode[num]);
}

int CH451getKey(){
	int i=0;
	char getKeyTemp=0x00;	
	CH451do(0x0700);//red key
	for(i=0;i<7;i++){
		getKeyTemp<<=1;
		if(DOUT) getKeyTemp|=1;
		else getKeyTemp|=0;
		DCLK=0;
		DCLK=1;
	}
	if(getKeyTemp==0x00) return 16;
	for(i=0;i<16;i++){
		if(getKeyTemp==keyCode[i]){
			return i;
		}
	}
	return 16;
}

void show(int shownum,int temperature){
	//assume that shownum is a 0-999 int, and temperature is a 0.0-99.9 float
	int tenTimes=temperature/10;
	int i=0;
	int show_j=0;
	CH451show(show_j++,tenTimes%10,0);
	tenTimes/=10;
	CH451show(show_j++,tenTimes%10,1);
	tenTimes/=10;
	CH451show(show_j++,tenTimes%10,0);
	CH451show(show_j++,17,0);
	CH451show(show_j++,17,0);
	CH451show(show_j++,shownum%10,0);
	shownum/=10;
	CH451show(show_j++,shownum%10,0);
	shownum/=10;
	CH451show(show_j++,shownum%10,0);
	
}

void main(void)
{
	int keyValue=0;
	int temperature=321;
	EA=1;
	ET0=1;
	ET1=1;
	TMOD=0x11;
	TH0=0x04c;//FC18 1MS
	TL0=0x0f7;//B1E0 20MS D8F0 10MS EC78 5MS 3CB0 50MS
	TH1=0x04c;//
	TL1=0x0f7;//4cf7 50ms
	//TR0=1;
	//TR1=1;

	DIN=0;
	DIN=1;
	CH451do(0x0201);//reset
	CH451do(0x0403);//screen and keyboard

 	while(1){
		temperature=readtemper();
		show(timecount,temperature);
		keyValue=CH451getKey();
		if(keyValue==16) keyoff=1;
		if(keyValue!=16&&keyoff!=0){
			keyoff=0;
			if(mode==0){
				if(keyValue<=9){
					timecount=(timecount*10+keyValue)%1000;
				}
				else if(keyValue==12){
					mode=1;
					TR0=1;
				}
				else if(keyValue==14){
					timecount=0;
					TR0=0;
					T0count=0;
					mode=0;
				}
			}
			else if(mode==1){
				if(keyValue==13){
					mode=2;
					TR0=0;
				}
				else if(keyValue==14){
					timecount=0;
					TR0=0;
					T0count=0;
					mode=0;
				}
			}
			else if(mode==2){
				if(keyValue==13){
					TR0=1;
					mode=1;
				}
				else if(keyValue==14){
					timecount=0;
					TR0=0;
					T0count=0;
					mode=0;
				}
			}
		}
	}
}
void TIMEOUT0() interrupt 1{
	TH0=0x04c;
	TL0=0x0f7;
	T0count++;
	if(T0count==20){T0count=0;timecount--;}
	if(timecount<=0||mode==2){TR0=0;}
}
void TIMEOUT1() interrupt 3 using 2{
	int keyValue;
	TH1=0x04c;
	TL1=0x0f7;
}